/*
* Copyright (c) 2000-2015 Samsung Electronics Co., Ltd All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#define FONT_ROM       "HelveticaNeue:style=Roman"
#define FONT_MED       "HelveticaNeue:style=Medium"
#define SELINFO_H 48
#define GALLERY_EDC_COLOR_BG  0 0 0 255
#define LAYOUT_WIDTH 500
#define LAYOUT_HEIGHT 300
#define CENTER_PADDING_WIDTH 5
#define YOUR_THEME_BASE_SCALE 1 // 2.6 is default base scale for Tizen 2.4 HD.

#include "gallery-efl-edc-res.h"

externals {
   external: "elm";
   external: "feedback";
}

collections {

	plugins {
		plugin {
			name: "touch_sound_plugin";
			source: "feedback";
			param: "FEEDBACK_TYPE_SOUND FEEDBACK_PATTERN_TAP"; // FEEDBACK_TYPE_SOUND, FEEDBACK_PATTERN_TOUCH_TAP
			/* 2014.06.11 updated from libsvi(feedback)
			Above plugin will run below external function:
			int feedback_play_type(feedback_type_e type, feedback_pattern_e pattern);
			param1: feedback_type_e
			FEEDBACK_TYPE_NONE = 0,
			FEEDBACK_TYPE_SOUND = 1,
			FEEDBACK_TYPE_VIBRATION,
			FEEDBACK_TYPE_LED,
			FEEDBACK_TYPE_END

			* param2 enumeration:
			FEEDBACK_PATTERN_TAP = 0,
			FEEDBACK_PATTERN_SIP,
			FEEDBACK_PATTERN_SIP_BACKSPACE,
			FEEDBACK_PATTERN_SIP_FUNCTION,
			FEEDBACK_PATTERN_SIP_FJKEY,
			...

			* For more information please refer libsvi.
			*/
		}
	}

#include "gallery-efl-gengrid.edc"
#include "gallery-efl-gengrid-item-thumbview.edc"
#include "gallery-efl-gengrid-item-albums.edc"
#include "gallery-efl-check.edc"
#include "gallery-efl-nocontents.edc"
#include "gallery-efl-expanded-title.edc"

group {
		name: "gallery_efl/gridview";
		parts {
			part {
				name: "background";
				type, RECT;
				description {
					state: "default" 0.0;
					rel1 { relative: 0.0 0.0;}
					rel2 { relative: 1.0 1.0; }
					color, 0 0 0 0;
				}
			}
			part {
				name: "split.view.bg.color";
				type: RECT;
				mouse_events: 1;
				description {
					state: "default" 0.0;
					rel1 { relative: 0.0 0.0; to: split.view; }
					rel2 { relative: 1.0 1.0; to: split.view; }
					color: 230 230 230 255;
				}
			}
			part {
				name: "split.view";
				type: SWALLOW;
				mouse_events: 1;
				description {
					state: "default" 0.0;
					min: 0 0;
					max: 0 0;
					align: 0 0;
					rel1 { relative: 0.0 0.0; }
					rel2 { relative: 1.0 1.0; }
					color : 0 255 0 255;
				}
				description {
					state: "visible" 0.0;
					rel1 { relative: 0.0 0.0; }
					rel2 { relative: 179/540 1.0; }
					fixed: 1 0;
					min: 0 0;
					max: -1 -1;
					color : 0 255 0 255;
				}
			}
			part {
				name: "select.all.area.bg";
				type: RECT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					min: 0 0;
					max: 0 0;
					align: 0 0;
					rel1 { relative: 1.0 0.0; to: "split.view"; }
					rel2 { relative: 1.0 1.0; }
					color: 255 255 255 255;
				}
				description {
					state: "visible" 0.0;
					inherit: "default" 0.0;
					min: 0 0;
					max: -1 60;
				}
			}
			part {
				name: "select.all.area.label";
				type: TEXT;
				mouse_events: 0;
				scale: 1;
				description {
					state: "default" 0.0;
					rel1 { relative: 24/540 0.0; to: "select.all.area.bg";}
					rel2 { relative: 0.6 1.0; to: "select.all.area.bg";}
					text {
						text: "Select All";
						size: 18;
						align: 0.0 0.5;
					}
					color: 0 0 255 255;
					visible: 0;
				}
				description {
					state: "visible" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
			part {
				name: "select.all.area.check";
				type: SWALLOW;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1 { relative: 1.0 0.1; to: "select.all.area.bg"; offset: -60 0;}
					rel2 { relative: 1.0 0.9; to: "select.all.area.bg";}
					visible: 0;
				}
				description {
					state: "visible" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
			part {
				name: "select.all.area.check.fg";
				type: SWALLOW;
				mouse_events: 1;
				repeat_events: 0;
				description {
					state: "default" 0.0;
					rel1 { relative: 0 0; to: "select.all.area.check";}
					rel2 { relative: 1 1; to: "select.all.area.check";}
					align: 1 0.5;
					visible: 0;
				}
				description {
					state: "visible" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
			part {
				name: "contents";
				type: SWALLOW;
				mouse_events: 1;
				scale: 1;
				description {
					state: "default" 0.0;
					rel1 { relative: 0.0 1.0; to: "select.all.area.bg";}
					rel2 { relative: 1.0 1.0; to: "background";}
				}
				description {
					state: "moveup" 0.0;
					rel1 { relative: 0.0 0.0; to: "background";}
					rel2 { relative: 1.0 1.0; to: "elm.selinfo.clipper"; }
				}
			}
			part {
				name: "elm.swallow.selinfo";
				type: SWALLOW;
				scale: 1;
				clip_to: "elm.selinfo.clipper";
				description {
					state: "default" 0.0;
					rel1.to: "elm.selinfo.clipper";
					rel2.to: "elm.selinfo.clipper";
				}
			}
			part {
				name: "elm.selinfo.clipper";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 SELINFO_H; // bottom padding size for selectioninfo
					fixed: 0 1;
					align: 0.5 1.0;
					rel1.relative: 0.0 1.0;
					visible: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					color: GALLERY_EDC_COLOR_BG;
				}
			}
		}
		script {
			public message(Msg_Type:type,id, ...)
			{
				if((type == MSG_INT) && (id == 1))
				{
					new a;
					a = getarg(2);
					custom_state(PART:"split.view","default",0.0);
					set_state_val(PART:"split.view",STATE_MAX,a,-1);
					set_state(PART:"split.view","custom",0.0);
				}
				if((type == MSG_INT) && (id == 2))
				{
					new a;
					new x, y;
					a = getarg(2);
					custom_state(PART:"select.all.area.bg","default",0.0);
					get_state_val(PART:"select.all.area.bg",STATE_MAX,x,y);
					set_state_val(PART:"select.all.area.bg",STATE_MIN,0,60);
					set_state_val(PART:"select.all.area.bg",STATE_MAX,a,60);
					set_state(PART:"select.all.area.bg","custom",0.0);
				}
			}
		}
		programs {
			program {
				name: "thumb_view_default";
				signal: "elm,thumb_view,state,default";
				source: "elm";
				script {
					set_state(PART:"contents", "default", 0.0);
					set_state(PART:"elm.selinfo.clipper", "default", 0.0);
				}
			}
			program {
				name: "thumb_view_moveup";
				signal: "elm,thumb_view,state,moveup";
				source: "elm";
				script {
					set_state(PART:"contents", "moveup", 0.0);
					set_state(PART:"elm.selinfo.clipper", "show", 0.0);
				}
			}
			program {
				name: "selectall_visible";
				signal: "elm,selectall,state,visible";
				source: "elm";
				script {
					set_state(PART:"select.all.area.label", "visible", 0.0);
					set_state(PART:"select.all.area.check", "visible", 0.0);
					set_state(PART:"select.all.area.check.fg", "visible", 0.0);
				}
			}
			program {
				name: "selectall_visible_bg";
				signal: "elm,selectall,state,visible,bg";
				source: "elm";
				script {
					set_state(PART:"select.all.area.bg", "visible", 0.0);
				}
			}
			program {
				name: "selectall_default";
				signal: "elm,selectall,state,default";
				source: "elm";
				script {
					set_state(PART:"select.all.area.label", "default", 0.0);
					set_state(PART:"select.all.area.check", "default", 0.0);
					set_state(PART:"select.all.area.bg", "default", 0.0);
					set_state(PART:"select.all.area.check", "default", 0.0);
				}
			}
			program {
				name: "split_view_default";
				signal: "elm,splitview,state,default";
				source: "elm";
				action: STATE_SET "default" 0.0;
				target: "split.view";
				transition : LINEAR 0.5;
			}
			program {
				name: "split_view_visible";
				signal: "elm,splitview,state,visible";
				source: "elm";
				action: STATE_SET "custom" 0.0;
				target: "split.view";
				transition : LINEAR 0.5;
			}
			program {
				name: "touch_snd";
				signal : "mouse,clicked,1";
				source : "select.all.area.check.fg";
				action: RUN_PLUGIN "touch_sound_plugin";
			}
		}
	}

	group
	{
		name: "gallery_efl/albumview";
		parts {
			part {
				name: "background";
				type, RECT;
				description {
					state: "default" 0.0;
					rel1 { relative: 0.0 0.0;}
					rel2 { relative: 1.0 1.0; offset: -1 -1; }
					color, 0 0 0 0;
				}
			}
			part {
				name: "contents";
				type: SWALLOW;
				mouse_events: 1;
				scale: 1;
				description {
					state: "default" 0.0;
					rel1 { relative: 0.0 0.0; to: "background";}
					rel2 { relative: 1.0 1.0; to: "background";}
				}
			}
		}
	}
	group { name: "ge_bg_layout";
		parts {
			part { name: "bg";
			type: RECT;
			mouse_events:  0;
			description { state: "default" 0.0;
				color: 255 255 255 45;
			}
		}
			part { name: "elm.swallow.image";
				type: SWALLOW;
				description { state: "default" 0.0;
				}
			}
		}
	}

	group { name: "ge_help_layout";
		parts {
			part { name: "bg";
				type: RECT;
				mouse_events:  0;
				description { state: "default" 0.0;
				}
			}
			part { name: "elm.swallow.image";
				type: SWALLOW;
				description { state: "default" 0.0;
				}
			}
		}
	}
	group { name: "ceter_algined_text_layout_split_view";
		styles {
			style { name: "my_textblock_name_style_split_view";
			base: "font=Sans:style=Regular font_size=12 color=#000000 ellipsis=1.0";
			}
			style { name: "my_textblock_count_style_split_view";
			base: "font=Sans:style=Regular font_size=12 color=#000000";
			}
		}
		script {
			public scale_value;
			public pw;
			public tw;
			public calc_text_size() {
				new x, y, w, h;
				new bx, by, bw, bh;
				new cx, cy, cw, ch;
				get_geometry(PART:"elm.sub.text", x, y, w, h);
				get_geometry(PART:"base", bx, by, bw, bh);
				get_geometry(PART:"center_padding", cx, cy, cw, ch);
				if (get_float(scale_value) != 0) {
					// Reverting scale multiplied width.
					set_float(pw, (w + cw) * (YOUR_THEME_BASE_SCALE / get_float(scale_value)));
					set_float(tw, (bw - cw - w) * (YOUR_THEME_BASE_SCALE / get_float(scale_value)));
				} else {
					set_float(pw, w + cw);
					set_float(tw, bw - cw - w);
				}
				custom_state(PART:"right_dynamic_padding", "default", 0.0);
				set_state_val(PART:"right_dynamic_padding", STATE_MIN, get_int(pw), 0);
				set_state(PART:"right_dynamic_padding", "custom", 0.0);
				custom_state(PART:"elm.text", "default", 0.0);
				set_state_val(PART:"elm.text", STATE_MAX, get_int(tw), -1);
				set_state(PART:"elm.text", "custom", 0.0);
			}
			public message(Msg_Type:type, id, ...) {
				if (type == MSG_FLOAT) {
				new Float:scale_v;
				scale_v = getfarg(2);
				set_float(scale_value, scale_v);
				calc_text_size();
				}
			}
		}
		parts {
			part { name: "base";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					rel1.relative: 0 0;
					rel2.relative: 1 1;
					color: 0 0 0 0;
				}
			}
			part { name: "right_dynamic_padding";
				type: SPACER;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					align: 1.0 0.5;
					min: 0 0;
					rel1.relative: 1.0 0.0;
				}
			}
			part { name: "elm.text.bg";
				type: SPACER;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					rel2 {
						to_x: "right_dynamic_padding";
						relative: 0.0 1.0;
					}
				}
			}
			part { name: "elm.text";
				type: TEXTBLOCK;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					min: 0 0;
					rel1 {
						to_x: "elm.text.bg";
						relative: 0.5 0.0;
					}
					rel2 {
						to_x: "elm.text.bg";
						relative: 0.5 1.0;
					}
					text {
						style: "my_textblock_name_style_split_view";
						min: 1 1;
						max: 0 1;
					}
				}
			}
			part { name: "center_padding";
				type: SPACER;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					align: 0.0 0.5;
					min: CENTER_PADDING_WIDTH 0;
					rel1 {
						to_x: "elm.text";
						relative: 1.0 0.0;
					}
					rel2 {
						to_x: "elm.text";
						relative: 1.0 1.0;
					}
				}
			}
			part { name: "elm.sub.text";
				type: TEXTBLOCK;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					min: 0 0;
					align: 0.0 0.5;
					rel1 {
						to_x: "center_padding";
						relative: 1.0 0.0;
					}
					rel2 {
						to_x: "center_padding";
						relative: 1.0 1.0;
					}
					text {
						style: "my_textblock_count_style_split_view";
						min: 1 1;
						max: 0 1;
					}
				}
			}
		}
	}
}
